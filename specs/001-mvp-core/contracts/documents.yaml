openapi: 3.0.3
info:
  title: Writing Timeline Platform - Documents API
  version: 1.0.0
  description: CRUD operations for writing documents

servers:
  - url: http://localhost:3000/api
    description: Local development
  - url: https://writeback.vercel.app/api
    description: Production

paths:
  /documents:
    post:
      summary: Create a new document
      operationId: createDocument
      tags:
        - Documents
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 255
                  example: "My First Essay"
                status:
                  type: string
                  enum: [draft, published, archived]
                  default: draft
                  example: "draft"
                visibility:
                  type: string
                  enum: [private, public, unlisted]
                  default: private
                  example: "private"
      responses:
        '201':
          description: Document created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    get:
      summary: List user's documents
      operationId: listDocuments
      tags:
        - Documents
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, archived]
          description: Filter by status
        - name: visibility
          in: query
          schema:
            type: string
            enum: [private, public, unlisted]
          description: Filter by visibility
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentSummary'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'

  /documents/{id}:
    get:
      summary: Get document by ID
      operationId: getDocument
      tags:
        - Documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'

    patch:
      summary: Update document
      operationId: updateDocument
      tags:
        - Documents
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 255
                status:
                  type: string
                  enum: [draft, published, archived]
                visibility:
                  type: string
                  enum: [private, public, unlisted]
      responses:
        '200':
          description: Document updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete document
      operationId: deleteDocument
      tags:
        - Documents
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      responses:
        '204':
          description: Document deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /documents/{id}/versions:
    get:
      summary: Get first and final versions for diff
      operationId: getDocumentVersions
      tags:
        - Documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      responses:
        '200':
          description: Document versions
          content:
            application/json:
              schema:
                type: object
                properties:
                  first:
                    type: string
                    description: First version content
                  final:
                    type: string
                    description: Final version content
                  checkpoints:
                    type: array
                    items:
                      $ref: '#/components/schemas/Checkpoint'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Supabase JWT token

  parameters:
    DocumentId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Document UUID

  schemas:
    Document:
      type: object
      required:
        - id
        - user_id
        - title
        - status
        - visibility
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        title:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        visibility:
          type: string
          enum: [private, public, unlisted]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        published_at:
          type: string
          format: date-time
          nullable: true
        first_version_content:
          type: string
          nullable: true
        final_content:
          type: string
          nullable: true
        event_count:
          type: integer
        writing_duration_ms:
          type: integer
          format: int64

    DocumentSummary:
      type: object
      required:
        - id
        - title
        - status
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        visibility:
          type: string
          enum: [private, public, unlisted]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        event_count:
          type: integer
        writing_duration_ms:
          type: integer
          format: int64

    Checkpoint:
      type: object
      properties:
        id:
          type: string
          format: uuid
        event_index:
          type: integer
        timestamp:
          type: integer
          format: int64
        label:
          type: string
          nullable: true

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Validation error: title is required"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Authentication required"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access denied to this resource"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Document not found"
